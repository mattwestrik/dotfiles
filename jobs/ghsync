#!/bin/sh

# Sync all repositories in the account associated with a GitHub API token to a local folder.
# Expects $GITHUB_FOLDER and $GITHUB_API_TOKEN to be set.

GREEN='\033[0;32m'
NC='\033[0m'
CHUNK_SIZE=100

get_repo_data() {
	query="{\
		 \"query\": \"query { viewer { repositories(first: $CHUNK_SIZE, $1) { nodes { name, sshUrl, }, pageInfo { endCursor, hasNextPage, } } } }\"\
	}"
	curl --silent -H "Authorization: bearer $GITHUB_API_TOKEN" -X POST -d "$query" https://api.github.com/graphql
}


fetch_repos_for_data() {
	for sshUrl in $(echo $1 | jq -r '.[] | .viewer | .[] | .nodes | .[] | .sshUrl'); do
		name=$(echo $sshUrl | perl -n -e'/git\@github.com:[A-Za-z0-9]+\/(.+).git/ && print $1')

		if [ -d $name ]; then
			if [ "$2" == "--fetch-all" ]; then
				echo "\n${GREEN}Updating ${name}${NC}"
				(cd "$name"; git fetch --all)
			fi
		else
			echo "\n$GREEN$name is new, cloning...$NC"
			git clone --recurse-submodules $sshUrl "$name"
			if [ "$2" == "--fetch-all" ]; then
				(cd "$name"; git fetch --all)
			fi
		fi
	done
}

# ----

mkdir -p $GITHUB_FOLDER
cd $GITHUB_FOLDER

cursor=""
while true; do
	repo_data=$(get_repo_data $cursor)
	fetch_repos_for_data $repo_data $1

	continue=$(echo $repo_data | jq -r '.[] | .viewer | .[] | .pageInfo | .hasNextPage')
	if [[ $continue == "true" ]]; then
			cursor="after:\\\"$(echo $repo_data | jq -r '.[] | .viewer | .[] | .pageInfo | .endCursor')\\\""
	else
			break
	fi
done
